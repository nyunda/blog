<?php $__env->startSection('content'); ?><p>Comme tout les langages de programmation, JavaScript a un tas de trucs et astuces pouvant vous faciliter grandement la t√¢che ou pour mieux dire, les t√¢ches. Certaines sont connues et paraissent ultra simples, tandis que d'autres sont hyper bluffantes. Aujourd'hui, je vais vous en faire d√©couvrir quelques-un.</p>
<h2>R√©cup√©rer les valeurs uniques d'un tableau (Array)</h2>
<p>R√©cup√©rer les valeurs uniques d'un tableau n'a jamais √©t√© aussi facile, bien plus que vous ne pouviez vous l'imaginer :</p>
<pre><code class="language-js">let valeursUniques = [...new Set([1, 2, 3, 3])]
&gt;&gt; [1, 2, 3]</code></pre>
<p>Mais quelle facilit√© d√©concertante üòé ! Tout cela gr√¢ce √† l'objet <code>Set</code> (ensemble en fran√ßais) permettant de stocker des valeurs uniques de n'importe quel type, que ce soit des valeurs d'un type primitif ou des objets.</p>
<h2>Tableau et Boolean</h2>
<p>Besoin de filtrer un tableau pour ne garder que des valeurs non <code>null</code> ou similaire (<code>0</code>,  <code>undefined</code>,  <code>null</code>,  <code>false</code>, etc.) ?</p>
<pre><code class="language-js">monTableau
    .map(item =&gt; {
        // ...
    })
    // Chasser les valeurs nulles
    .filter(Boolean);</code></pre>
<p>En passant comme param√®tre <code>Boolean</code> et voil√† que l'on n'a plus √† faire aux valeurs nulles.</p>
<h2>Cr√©er des objets v√©ritablement vide (empty)</h2>
<p>C'est vrai, on peut le faire simplement avec <code>{}</code>, mais il y a un soucis, l'objet aura toujours un <code>__proto__</code> et la fonction habituelle <code>hasOwnProperty</code> ainsi que tant d'autres. Cependant, une m√©thode existe, et vous permet de cr√©er des objets vides, des pures objets dictionnaires.</p>
<pre><code class="language-js">let dict = Object.create(null);

// dict.__proto__ === "undefined"
// Aucune propri√©t√© n'existe tant qu'on ne l'a pas ajout√© vonlontairement</code></pre>
<p>Il n'y a absolument rien d'existant dans cet objet jusqu'√† ce que l'on pense en ajouter !</p>
<h2>Fusionner des objets</h2>
<p>Le besoin de fusionner plusieurs objets en JavaScript existe depuis des lustres, surtout lorsqu'est arriv√© la cr√©ation des classes et widgets avec options. Voici donc comment cela est possible, aussi simplement que possible :</p>
<pre><code class="language-js">const agent = { nom: 'Jane Doe', sexe: 'Feminin' };
const outils= { ordinateur: 'Mac', editeur: 'Vim' };
const traits = { gentillesse: 'Extreme', cheveullure: 'Brun', yeux: 'Bleu' };

const resume = {...agent, ...outils, ...traits};
/*
Object {
  "cheveullure": "Brun",
  "editeur": "Vim",
  "sexe": "Feminin",
  "gentillesse": "Extreme",
  "nom": "Jane Doe",
  "ordinateur": "Mac",
  "yeux": "Bleu",
}
*/</code></pre>
<p>Les trois points nous facilitent grandement la t√¢che.</p>
<h2>Exiger un param√®tre √† une fonction</h2>
<p>La possibilit√© d'ajouter des valeurs par d√©faut a √©t√© un ajout de qualit√© √† notre beau JavaScript, mais cette astuce vous permettra d'exiger un argument √† une fonction :</p>
<pre><code class="language-js">const requis = () =&gt; { throw new Error('param√®tre requis'); };

const bonjour = (nom = requis()) =&gt; { console.log(`Bonjour ${nom}`) };

// Une erreur sera g√©n√©r√©e si le param√®tre _nom_ n'est pas pass√© √† la fonction
bonjour();

// Ceci g√©n√©rera aussi une erreur
bonjour(undefined);

// Ceux-ci, non !
bonjour(null);
bonjour('Janet');</code></pre>
<p>Ce sont des validation d'un niveau sup√©rieur üòÖ !</p>
<h2>Alias apr√®s d√©structuration</h2>
<p>La <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Affecter_par_d%C3%A9composition">d√©structuration</a> a √©t√© bienvenue dans le JavaScript mais, des fois on pr√©f√®re faire r√©f√©rence aux propri√©t√©s en utilisant des noms diff√©rents. Voici comment profiter de l'avantage apport√© par les alias :</p>
<pre><code class="language-js">const obj = { x: 1 };

// Donner obj.x √† { x }
const { x } = obj;

// Donner obj.x √† { nomDifferent }
const { x: nomDifferent } = obj;</code></pre>
<p>Important pour √©viter les conflits de nommage avec les variables d√©j√† existantes.</p>
<p>Le JavaScript a beaucoup √©volu√© au fil des ann√©es, mais ce qui fait de lui un langage du futur, pr√™t √† conquerir le monde, c'est surtout les am√©liorations et nouveaut√©s qui y sont ajout√©es. Malgr√® son √©volution hyper dynamique, nous avons quand m√™me besoin de conna√Ætre certaines astuces pour les utiliser au moment opportun.</p>
<p>Cet article vous a-t-il √©t√© utile ? Voulez-vous que j'√©crive un autre concenant un sujet qui vous pr√©occupe particuli√®rement ? Alors, √©crivez-moi un message sur ma page de <a href="/contact">contact</a>.</p><?php $__env->stopSection(); ?>
<?php echo $__env->make('_layouts.post', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?>